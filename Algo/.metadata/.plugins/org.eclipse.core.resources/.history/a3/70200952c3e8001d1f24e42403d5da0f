package BOJ;

import java.io.*;
import java.util.*;

public class BOJ_9019 {
	
	static int D(int n) {
		return (2 * n) % 10000;
	}
	
	static int S(int n) {
		return n - 1 == 0? 9999 : n - 1;
	}
	
	static int L(int n) {
		int d1 = n / 1000;
		n %= 1000;
		int d2 = n / 100;
		n %= 100;
		int d3 = n / 10;
		int d4 = n % 10;
		
		return ((d2 * 10 + d3) * 10 + d4) * 10 + d1;
	}
	
	static int R(int n) {
		int d1 = n / 1000;
		n %= 1000;
		int d2 = n / 100;
		n %= 100;
		int d3 = n / 10;
		int d4 = n % 10;
		
		return ((d4 * 10 + d1) * 10 + d2) * 10 + d3;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc < T; tc++) {
			st = new StringTokenizer(br.readLine());
			int A = Integer.parseInt(st.nextToken());
			int B = Integer.parseInt(st.nextToken());
			
			
		}
	}

}
